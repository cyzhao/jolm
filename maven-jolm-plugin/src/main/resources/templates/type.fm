/**
 * PLEASE DO NOT EDIT THIS FILE. GENERATED BY maven-jolm-plugin (http://jolm.sourceforge.net).
 */
package ${javaPackage};

<#assign isSubclass=objectClass.getSubclassOf()??>
import org.springframework.ldap.core.DistinguishedName;
<#if isSubclass>
import org.apache.commons.lang.ArrayUtils;
<#else>
import net.jolm.LdapEntity;
</#if>

public class ${className} <#rt> 
<#if isSubclass>
	extends ${parentClassName} <#t>
<#else>
	implements LdapEntity <#t>
</#if>{
   private static final long serialVersionUID = 1L;

   public ${className}() {
   }
   
   <#if (objectClass.getRequiredAttributes()?size > 0)>
   public ${className}(<#rt>
   	  <#list objectClass.getRequiredAttributes() as attribute><#t>
   	  		${attribute.getAttributeType()} ${attribute.getJavaFieldName()}<#if attribute_has_next>, </#if><#t>
   	  </#list><#t>
   	  ) {<#lt>
	  <#list objectClass.getRequiredAttributes() as attribute>
	  	this.${attribute.getJavaFieldName()} = ${attribute.getJavaFieldName()};
	  </#list>
   }
   </#if>
    
   public String getObjectClass() {
      return "${objectClass.getName()}";
   }
   
   public String[] getObjectClasses() {
   <#if isSubclass>
      return (String[])ArrayUtils.add(super.getObjectClasses(), "${objectClass.getName()}");
   <#else>
   	  return new String[] {"${objectClass.getName()}"};
   </#if>
   }
   
   public String getRdn() {
<#if rdnAttribute??> 
	  return "${rdnAttribute.getJavaFieldName()}=" + get${rdnAttribute.getJavaFieldName()?cap_first}();
<#else>
	  return "";
</#if>   
   }
  
   public String getParentDn() {
      DistinguishedName distinguishedName = new DistinguishedName(getDn());
      distinguishedName.removeLast();
      return distinguishedName.toString();
   }
   
   private String dn;

   public String getDn() {
      return this.dn;
   }

   public void setDn(String dn) {
      this.dn = dn;
   }

   public String[] getChildObjectClasses() {
      return new String[] {<#rt>
      	<#list childObjectClasses as childObjectClass>
      		"${childObjectClass}"<#if childObjectClass_has_next>,</#if><#t>
      	</#list>
      };<#lt>
   }
   
 <#list objectClass.getRequiredAttributes() as attribute>
	<@field_gen attr=attribute/>  
 </#list>
 <#list objectClass.getOptionalAttributes() as attribute>
	<@field_gen attr=attribute/>  
 </#list>
 
 <#list childObjectClasses as childObjectClass>
   <#assign childrenType = childObjectClass?cap_first + "[]">
   <#assign childrenInstanceName = childObjectClass?uncap_first + "s">
   private ${childrenType} ${childrenInstanceName};
   
   public ${childrenType} get${childrenInstanceName?cap_first}() {
      return this.${childrenInstanceName};
   }
   
   public void set${childrenInstanceName?cap_first}(${childrenType} ${childrenInstanceName}) {
      this.${childrenInstanceName} = ${childrenInstanceName};
   }
   
 </#list>	
 <#macro field_gen attr>
   <#assign fieldName=attr.getJavaFieldName()?uncap_first>
   private ${attr.getAttributeType()} ${fieldName};
   
   public ${attr.getAttributeType()} get${fieldName?cap_first}() {
   		return this.${fieldName};
   }
   
   public void set${fieldName?cap_first}(${attr.getAttributeType()} ${fieldName}) {
   		this.${fieldName} = ${fieldName};
   }
 </#macro>
}
