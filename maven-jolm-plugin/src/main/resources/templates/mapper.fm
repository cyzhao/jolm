/**
 * PLEASE DO NOT EDIT THIS FILE. GENERATED BY maven-jolm-plugin (http://jolm.sourceforge.net).
 */
package ${javaPackage};

<#assign isSubclass = objectClass.getSubclassOf()??>
<#assign typeClassName = objectClass.getName()?cap_first>
<#assign typeVariableName = objectClass.getName()?uncap_first>
import ${javaPackage?replace('mappers', 'types')}.${typeClassName};

import net.jolm.LdapEntity;
import net.jolm.LdapContextMapper;
<#if !isSubclass>
import net.jolm.Null;
</#if>

import org.springframework.ldap.core.DirContextAdapter;
import org.springframework.ldap.core.DirContextOperations;

public class ${className} <#rt>
<#if isSubclass>
	extends ${parentClassName} <#t>
</#if>
	implements LdapContextMapper {<#lt>
   public DirContextOperations mapToContext(Object object) {
      DirContextAdapter context = new DirContextAdapter();
      context.setAttributeValues("objectclass", ((LdapEntity)object).getObjectClasses());
      mapToContext(object, context);
      return context;
   }
   
   public void mapToContext(Object object, DirContextOperations context) {
   <#if isSubclass>
      ${typeClassName} ${typeVariableName} = (${typeClassName})object;
      super.mapToContext(object, context);
	 <#list objectClass.getRequiredAttributes() as attribute>
		<@set_ldap_attribute_gen attr=attribute/>  
	  </#list>      
	 <#list objectClass.getOptionalAttributes() as attribute>
		<@set_ldap_attribute_gen attr=attribute/>  
	  </#list>      
   </#if>
   }
   
   public ${typeClassName} mapFromContext(Object ctx) {
      DirContextOperations context = (DirContextOperations)ctx;
      ${typeClassName} ${typeVariableName} = new ${typeClassName}();
      if ( context.getStringAttributes("objectClass") == null || !arrayContainsIgnoreCase(context.getStringAttributes("objectClass"), ${typeVariableName}.getObjectClass()) ) {
         return null;
      }
      
      mapFromContext(context, ${typeVariableName});
      if ( context.getDn() != null ) {
         ${typeVariableName}.setDn(context.getDn().toString());
      }     
      
      return ${typeVariableName};
   }
   
   public void mapFromContext(DirContextOperations context, Object resultObject) {
   <#if isSubclass>
      super.mapFromContext(context, resultObject);
      ${typeClassName} ${typeVariableName} = (${typeClassName})resultObject;
	 <#list objectClass.getRequiredAttributes() as attribute>
		<@set_ldapentity_field_gen attr=attribute/>  
	  </#list>          
	 <#list objectClass.getOptionalAttributes() as attribute>
		<@set_ldapentity_field_gen attr=attribute/>  
	  </#list>          
   </#if>   
   }
   
<#macro set_ldap_attribute_gen attr>
      <#assign getter = "${typeVariableName}.get${attr.getJavaFieldName()?cap_first}()">
      <#if attr.isMultiValues()>
      setLdapAttributes(context, "${attr.getName()}", ${getter});
      <#else>
      setLdapAttribute(context, "${attr.getName()}", ${getter});
      </#if>
</#macro>   
 
<#macro set_ldapentity_field_gen attr>
   <#assign attributeType="Object"> 
   <#if attr.getAttributeType()?starts_with("String")>
      <#assign attributeType="String"> 
   </#if>
      ${typeVariableName}.set${attr.getJavaFieldName()?cap_first}((${attr.getAttributeType()})context.get${attributeType}Attribute<#if attr.isMultiValues()>s</#if>("${attr.getName()}"));
</#macro>  

<#if !isSubclass>
   protected void setLdapAttribute(DirContextOperations context, String ldapAttributeName, Object value) {
      if (value != null) {
         context.setAttributeValue(ldapAttributeName, Null.isNullObject(value) ? null : value);
      }
   } 
   
   @SuppressWarnings("unused")
   protected void setLdapAttributes(DirContextOperations context, String ldapAttributeName, Object[] value) {
      if (value != null) {
         context.setAttributeValues(ldapAttributeName, Null.isNullObject(value) ? null : value);
      }
   } 
   
   protected boolean arrayContainsIgnoreCase(String[] array, String value) {
       for ( String item : array ) {
           if ( item != null && item.equalsIgnoreCase(value) ) {
               return true;
           }
       }
       return false;
   }
</#if>
}
